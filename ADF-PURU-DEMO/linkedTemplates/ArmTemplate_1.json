{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-PURU-DEMO"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/output_event')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_event",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_emp_blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_json_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp_data.csv",
						"container": "demotraining"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "city",
						"type": "varchar"
					},
					{
						"name": "is_active",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_emp_blob",
								"type": "DatasetReference"
							},
							"name": "Emp"
						},
						{
							"dataset": {
								"referenceName": "ds_sql",
								"type": "DatasetReference"
							},
							"name": "SQLemp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sqltables_copy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Isactive"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Emp",
						"source(output(",
						"          emp_key as integer,",
						"          id as integer,",
						"          name as string,",
						"          city as string,",
						"          is_active as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SQLemp",
						"Emp derive(Is_active = 1) ~> Isactive",
						"Isactive select(mapColumn(",
						"          id,",
						"          name,",
						"          city,",
						"          Is_active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"SQLemp select(mapColumn(",
						"          SQL_emp_key = emp_key,",
						"          SQL_id = id,",
						"          SQL_name = name,",
						"          SQL_city = city,",
						"          SQL_is_active = is_active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"Emp, select2 lookup(id == SQL_id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull(SQL_id)) ~> filter1",
						"filter1 select(mapColumn(",
						"          SQL_emp_key,",
						"          SQL_id,",
						"          SQL_name,",
						"          SQL_city,",
						"          SQL_is_active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive(SQL_is_active = 0) ~> derivedColumn1",
						"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['emp_key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          emp_key = SQL_emp_key,",
						"          id = SQL_id,",
						"          name = SQL_name,",
						"          city = SQL_city,",
						"          is_active = SQL_is_active",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_emp_blob')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql')]"
			]
		}
	]
}