{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-PURU-DEMO"
		},
		"trig_event_created_properties_pl_json_parameters_folderpath": {
			"type": "string",
			"defaultValue": "@triggerbody().folderPath"
		},
		"trig_event_created_properties_pl_json_parameters_filename": {
			"type": "string",
			"defaultValue": "@triggerbody().fileName"
		},
		"trig_event_created_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/8d3efd2d-0f51-4602-8ff1-e86fe93ed3b0/resourceGroups/Demo/providers/Microsoft.Storage/storageAccounts/trainingdemoit"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_emp_blob",
								"type": "DatasetReference"
							},
							"name": "Emp"
						},
						{
							"dataset": {
								"referenceName": "ds_sql",
								"type": "DatasetReference"
							},
							"name": "SQLemp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sqltables_copy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Isactive"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Emp",
						"source(output(",
						"          emp_key as integer,",
						"          id as integer,",
						"          name as string,",
						"          city as string,",
						"          is_active as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SQLemp",
						"Emp derive(Is_active = 1) ~> Isactive",
						"Isactive select(mapColumn(",
						"          id,",
						"          name,",
						"          city,",
						"          Is_active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"SQLemp select(mapColumn(",
						"          SQL_emp_key = emp_key,",
						"          SQL_id = id,",
						"          SQL_name = name,",
						"          SQL_city = city,",
						"          SQL_is_active = is_active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"Emp, select2 lookup(id == SQL_id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull(SQL_id)) ~> filter1",
						"filter1 select(mapColumn(",
						"          SQL_emp_key,",
						"          SQL_id,",
						"          SQL_name,",
						"          SQL_city,",
						"          SQL_is_active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive(SQL_is_active = 0) ~> derivedColumn1",
						"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['emp_key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          emp_key = SQL_emp_key,",
						"          id = SQL_id,",
						"          name = SQL_name,",
						"          city = SQL_city,",
						"          is_active = SQL_is_active",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_emp_scd2",
								"type": "DatasetReference"
							},
							"name": "EmpCSV"
						},
						{
							"dataset": {
								"referenceName": "ds_sql",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_sql",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "isActive"
						},
						{
							"name": "select1"
						},
						{
							"name": "SQLselect"
						},
						{
							"name": "LkpEmpid"
						},
						{
							"name": "select2"
						},
						{
							"name": "IsactiveSQL"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpCSV",
						"source(output(",
						"          emp_key as integer,",
						"          id as integer,",
						"          name as string,",
						"          city as string,",
						"          is_active as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"EmpCSV derive(IsActive = 1) ~> isActive",
						"isActive select(mapColumn(",
						"          id,",
						"          name,",
						"          city,",
						"          IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source2 select(mapColumn(",
						"          SQL_emp_key = emp_key,",
						"          SQL_id = id,",
						"          SQL_name = name,",
						"          SQL_city = city,",
						"          SQL_is_active = is_active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SQLselect",
						"EmpCSV, SQLselect lookup(id == SQL_id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> LkpEmpid",
						"LkpEmpid select(mapColumn(",
						"          SQL_emp_key,",
						"          SQL_id,",
						"          SQL_name,",
						"          SQL_city",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(is_active = 0) ~> IsactiveSQL",
						"IsactiveSQL alterRow(updateIf(0==0)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          name as string,",
						"          salary as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['emp_key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          emp_key = SQL_emp_key,",
						"          id = SQL_id,",
						"          name = SQL_name,",
						"          city = SQL_city,",
						"          is_active",
						"     )) ~> sink1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          name as string,",
						"          salary as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          city,",
						"          is_active = IsActive",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_scd2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_emp_scd2",
								"type": "DatasetReference"
							},
							"name": "Emp"
						},
						{
							"dataset": {
								"referenceName": "ds_sql",
								"type": "DatasetReference"
							},
							"name": "SQLDBEmp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_sql",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "DerColIsActive"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "LkpEmpid"
						},
						{
							"name": "select3"
						},
						{
							"name": "DerviedIsActive"
						},
						{
							"name": "select4"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Emp",
						"source(output(",
						"          emp_key as integer,",
						"          id as integer,",
						"          name as string,",
						"          city as string,",
						"          is_active as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SQLDBEmp",
						"Emp derive(is_active = 1) ~> DerColIsActive",
						"DerColIsActive select(mapColumn(",
						"          id,",
						"          name,",
						"          city,",
						"          is_active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"SQLDBEmp select(mapColumn(",
						"          SQL_emp_key = emp_key,",
						"          SQL_id = id,",
						"          SQL_name = name,",
						"          SQL_city = city,",
						"          SQL_is_active = is_active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"Emp, select2 lookup(id == SQL_id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> LkpEmpid",
						"LkpEmpid select(mapColumn(",
						"          SQL_emp_key,",
						"          SQL_id,",
						"          SQL_name,",
						"          SQL_city",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive(SQL_is_Active = 0) ~> DerviedIsActive",
						"DerviedIsActive select(mapColumn(",
						"          SQL_emp_key,",
						"          SQL_id,",
						"          SQL_name,",
						"          SQL_city,",
						"          SQL_is_Active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4 alterRow(updateIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          name as string,",
						"          salary as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['emp_key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          emp_key = SQL_emp_key,",
						"          id = SQL_id,",
						"          name = SQL_name,",
						"          city = SQL_city,",
						"          is_active = SQL_is_Active",
						"     )) ~> sink1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          name as string,",
						"          salary as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_emp_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "master_execute",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_emp_data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_master_emp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute master Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_copy_emp_output",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trig_blob_EVENT')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_emp_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2023-11-26T02:15:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_emp_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2024-01-23T04:10:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trig_event_created')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_json",
							"type": "PipelineReference"
						},
						"parameters": {
							"folderpath": "[parameters('trig_event_created_properties_pl_json_parameters_folderpath')]",
							"filename": "[parameters('trig_event_created_properties_pl_json_parameters_filename')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/input/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trig_event_created_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		}
	]
}